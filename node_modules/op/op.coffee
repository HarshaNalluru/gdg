###
 Copyright (c) 2011 Kaleb Hornsby or respective authors
 
 @fileoverview JS Standard Operators as Functions
 @author <a href="http://kaleb.hornsby.ws">Kaleb Hornsby</a>
 @version 2011-17-11
###
"use strict"

### @namespace op ###
op = {}

if module?.exports?
    module.exports = op # using CommonJS
else if window?.document?
    window.op = op      # using DOM


###
 Comparison
 ==========
###
    
###*
 * Less Than
 *
 * @return whether `a < b`
 ###

op.lt = (a, b) -> a < b

###*
 * Less Than Or Equal
 *
 * @return whether `a <= b`
 ###

op.le = (a, b) -> a <= b

###*
 * Equal
 *
 * @return whether `a == b`
 ###

op.eq = (a, b) -> `a == b`

###*
 * Not Equal
 *
 * @return whether `a != b`
 ###

op.ne = (a, b) -> `a != b`

###*
 * Greater Than Or Equal
 *
 * @return whether `a >= b`
 ###

op.ge = (a, b) -> a >= b

###*
 * Greater Than
 *
 * @return whether `a > b`
 ###

op.gt = (a, b) -> a > b

###*
 * Identity
 *
 * @return whether `a` is `b`
 ###

op.is = (a, b) -> a is b

###*
 * Non-Identity
 *
 *  @return whether `a` is not ` b`
 ###

op.isnt = op.is_not = (a, b) -> a isnt b


###
 Logical
 =======
###

###* @return whether `obj` contains index `i` ###
op['in'] = op.contains = (i, obj) -> i in obj

###* @return whether `obj` is not truthy ###
op.not = (obj) -> !(obj)

###* @return whether `obj` is truthy ###
op.truth = (obj) -> !!(obj)

###* @return whether both `a` and `b` are truthy ###
op.and = (a, b) -> a && b

###* @return whether either `a` or `b` is truthy ###
op.or = (a, b) -> a || b


###
 Arithmetic
 ==========
###

###* @return {num} addition of `b` to `a` ###
op.add = (a, b) -> (+a) + (+b)

###* @return {num} subtraction of `b` from `a` ###
op.sub = (a, b) -> a - b

###* @return {num} multiplication `a` by `b` ###
op.mul = (a, b) -> a * b

###* @return {num} division of `a` into `b` ###
op.div = (a, b) -> a / b

###* @return {num} the remainder of `a` divided by `b` ###
op.mod = (a, b) -> a % b

###* @return {num} numerical value of `obj` ###
op.pos = (obj) -> +obj

###* @return {num} the negation of `obj` ###
op.neg = (obj) -> -obj

###* @return {num} the integer division of `a` and `b` ###
op.floordiv = op.intdiv = (a, b) -> Math.floor(a / b) 

###* @return {int,int} the integer division of `a` and `b` and the remainder ###
op.divmod = (a, b) -> [op.floordiv(a, b), a % b]

###
 Bitwise
 =======
###

###* @return ###
op.and_ = (a, b) -> a & b

###* @return ###
op.or_ = (a, b) -> a | b

###* @return ###
op.xor = (a, b) -> a ^ b

###* @return ###
op.invert = (a) -> ~a

###* @return ###
op.lshift = (a, b) -> a << b

###* @return ###
op.rshift = (a, b) -> a >> b

###
 Indexing
 ========
###

###*
 * Set property `k` of `obj` to `v`.
 * @return `v`
 ###
op.set = (obj, k, v) -> obj[k] = v

###* @return whether deletion of property `k` from `obj` succeded ###
op.del = (obj, k) -> delete obj[k]

###* @return property `k` from `obj` if defined, otherwise `v` ###
op.get = (obj, k, v) -> obj[k] || v

###*
 * Return the value of the dictionary at the specified key if the key does
 * not yet exist in the dictionary and a default value function is provided,
 * it will be invoked and its value will be both assigned to the dictionary
 * at the specified key and returned to the caller.
 *
 * @param obj Dictionary object or array
 *
 * @param k Index value
 *
 * @param defval
 * (Optional) Function which returns a default value if that of the
 * dictionary mapped to by the key is not yet defined.
 *
 * @return
 * The value of the dictionary mapped to by the key or the default value
 * returned by the function if the dictionary does not contain the key.
###

op.getdef = (obj, k, defval) ->
  obj[k] ? if typeof defval is 'function' then defval k else def

###
 Other
 =====
###

###* @return concatenation of `b` to `a` ###
op.concat = (a, b) -> '' + a + b

