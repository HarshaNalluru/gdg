(function() {
  /*
   Copyright (c) 2011 Kaleb Hornsby or respective authors
   
   @fileoverview JS Standard Operators as Functions
   @author <a href="http://kaleb.hornsby.ws">Kaleb Hornsby</a>
   @version 2011-17-11
  */
  "use strict";
  /* @namespace op */  var op;
  var __indexOf = Array.prototype.indexOf || function(item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (this[i] === item) return i;
    }
    return -1;
  };
  op = {};
  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    module.exports = op;
  } else if ((typeof window !== "undefined" && window !== null ? window.document : void 0) != null) {
    window.op = op;
  }
  /*
   Comparison
   ==========
  */
  /**
   * Less Than
   *
   * @return whether `a < b`
   */
  op.lt = function(a, b) {
    return a < b;
  };
  /**
   * Less Than Or Equal
   *
   * @return whether `a <= b`
   */
  op.le = function(a, b) {
    return a <= b;
  };
  /**
   * Equal
   *
   * @return whether `a == b`
   */
  op.eq = function(a, b) {
    return a == b;
  };
  /**
   * Not Equal
   *
   * @return whether `a != b`
   */
  op.ne = function(a, b) {
    return a != b;
  };
  /**
   * Greater Than Or Equal
   *
   * @return whether `a >= b`
   */
  op.ge = function(a, b) {
    return a >= b;
  };
  /**
   * Greater Than
   *
   * @return whether `a > b`
   */
  op.gt = function(a, b) {
    return a > b;
  };
  /**
   * Identity
   *
   * @return whether `a` is `b`
   */
  op.is = function(a, b) {
    return a === b;
  };
  /**
   * Non-Identity
   *
   *  @return whether `a` is not ` b`
   */
  op.isnt = op.is_not = function(a, b) {
    return a !== b;
  };
  /*
   Logical
   =======
  */
  /** @return whether `obj` contains index `i` */
  op['in'] = op.contains = function(i, obj) {
    return __indexOf.call(obj, i) >= 0;
  };
  /** @return whether `obj` is not truthy */
  op.not = function(obj) {
    return !obj;
  };
  /** @return whether `obj` is truthy */
  op.truth = function(obj) {
    return !!obj;
  };
  /** @return whether both `a` and `b` are truthy */
  op.and = function(a, b) {
    return a && b;
  };
  /** @return whether either `a` or `b` is truthy */
  op.or = function(a, b) {
    return a || b;
  };
  /*
   Arithmetic
   ==========
  */
  /** @return {num} addition of `b` to `a` */
  op.add = function(a, b) {
    return (+a) + (+b);
  };
  /** @return {num} subtraction of `b` from `a` */
  op.sub = function(a, b) {
    return a - b;
  };
  /** @return {num} multiplication `a` by `b` */
  op.mul = function(a, b) {
    return a * b;
  };
  /** @return {num} division of `a` into `b` */
  op.div = function(a, b) {
    return a / b;
  };
  /** @return {num} the remainder of `a` divided by `b` */
  op.mod = function(a, b) {
    return a % b;
  };
  /** @return {num} numerical value of `obj` */
  op.pos = function(obj) {
    return +obj;
  };
  /** @return {num} the negation of `obj` */
  op.neg = function(obj) {
    return -obj;
  };
  /** @return {num} the integer division of `a` and `b` */
  op.floordiv = op.intdiv = function(a, b) {
    return Math.floor(a / b);
  };
  /** @return {int,int} the integer division of `a` and `b` and the remainder */
  op.divmod = function(a, b) {
    return [op.floordiv(a, b), a % b];
  };
  /*
   Bitwise
   =======
  */
  /** @return */
  op.and_ = function(a, b) {
    return a & b;
  };
  /** @return */
  op.or_ = function(a, b) {
    return a | b;
  };
  /** @return */
  op.xor = function(a, b) {
    return a ^ b;
  };
  /** @return */
  op.invert = function(a) {
    return ~a;
  };
  /** @return */
  op.lshift = function(a, b) {
    return a << b;
  };
  /** @return */
  op.rshift = function(a, b) {
    return a >> b;
<<<<<<< HEAD
  };
  /*
   Indexing
   ========
  */
  /**
   * Set property `k` of `obj` to `v`.
   * @return `v`
   */
  op.set = function(obj, k, v) {
    return obj[k] = v;
  };
  /** @return whether deletion of property `k` from `obj` succeded */
  op.del = function(obj, k) {
    return delete obj[k];
  };
  /** @return property `k` from `obj` if defined, otherwise `v` */
  op.get = function(obj, k, v) {
    return obj[k] || v;
  };
  /**
   * Return the value of the dictionary at the specified key if the key does
   * not yet exist in the dictionary and a default value function is provided,
   * it will be invoked and its value will be both assigned to the dictionary
   * at the specified key and returned to the caller.
   *
   * @param obj Dictionary object or array
   *
   * @param k Index value
   *
   * @param defval
   * (Optional) Function which returns a default value if that of the
   * dictionary mapped to by the key is not yet defined.
   *
   * @return
   * The value of the dictionary mapped to by the key or the default value
   * returned by the function if the dictionary does not contain the key.
  */
  op.getdef = function(obj, k, defval) {
    var _ref;
    return (_ref = obj[k]) != null ? _ref : typeof defval === 'function' ? defval(k) : def;
  };
  /*
   Other
   =====
  */
  /** @return concatenation of `b` to `a` */
  op.concat = function(a, b) {
    return '' + a + b;
  };
}).call(this);
=======
};

/**
 * Indexing
 * ========
 */
op.set = function(obj, k, v) {
    var len = arguments.length, vargs = arguments[3];
    if (len < 2 || len > 4 ) return; //perhaps throw error?
    switch(len) {
    case 2:
        if (typeof k === 'object') {
            for (var i in k) if (k.hasOwnProperty(i)) {
                obj[i] = k[i];
            }
            // break so fall-through sets obj[k] = undef
            break;
        }
    case 3:
        obj[k] = v;  //What if typeof k is object?
        break;
    case 4:
        if (typeof k === 'number' && typeof v === 'number' && typeof vargs === 'object') {
            for (var i = v, j = 0; v < vargs; i++, j++) {
                obj[i] = vargs[j];
            }
            break;
        }
    }
    return obj;
};
op.del = function(obj, k) {
    if (typeof k === 'object') {
        for (var i in k) if (k.hasOwnProperty(i)) {
            delete obj[k[i]];
        }
    } else {
        delete obj[k];
    }
    return obj;
};
op.get = function(obj, k) {
    if (typeof k === 'object') {
        if (k.length && k[0]) {
            for (var i = 0; i < k.length; i++) {
                k[i] = obj[k[i]];
            }
        } else {
            for (var i in k) if (k.hasOwnProperty(i)) {
                k[i] = obj[i];
            }
        }
        return k;
    }
    return obj[k];
};
op.getdef = ( function ( undef ) {

    /**
     * Returns the value of the dictionary at the specified key; if the key does
     * not yet exist in the dictionary and a default value function is provided,
     * it will be invoked and its value will be both assigned to the dictionary
     * at the specified key and returned to the caller.
     *
     * @param obj
     * Dictionary object or array
     *
     * @param k
     * Index value
     *
     * @param defval
     * (Optional) Function which returns a default value if that of the
     * dictionary mapped to by the key is not yet defined.
     *
     * @return
     * The value of the dictionary mapped to by the key or the default value
     * returned by the function if the dictionary does not contain the key.
     */
    return function (obj, k, defval) {
        var val = obj[ k ];

        if (( val === undef ) && defval ) {
            val = obj[ k ] = defval();
        }
        return val;
    };
}());

/**
 * Other
 * =====
 */
op.concat = function(a, b) {
    return a + b;
}
>>>>>>> 6498735883be70f8bc36eaa48dbe74e10e3a5b5d
